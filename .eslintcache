[{"G:\\github\\videojs-http-source-selector-free\\scripts\\modules.rollup.config.js":"1","G:\\github\\videojs-http-source-selector-free\\scripts\\server.js":"2","G:\\github\\videojs-http-source-selector-free\\scripts\\test.rollup.config.js":"3","G:\\github\\videojs-http-source-selector-free\\scripts\\umd.rollup.config.js":"4","G:\\github\\videojs-http-source-selector-free\\scripts\\version.js":"5","G:\\github\\videojs-http-source-selector-free\\src\\components\\SourceMenuButton.js":"6","G:\\github\\videojs-http-source-selector-free\\src\\components\\SourceMenuItem.js":"7","G:\\github\\videojs-http-source-selector-free\\src\\plugin.js":"8","G:\\github\\videojs-http-source-selector-free\\test\\plugin.test.js":"9"},{"size":1161,"mtime":1667877758177,"results":"10","hashOfConfig":"11"},{"size":991,"mtime":1665542902504,"results":"12","hashOfConfig":"11"},{"size":1272,"mtime":1667877726861,"results":"13","hashOfConfig":"11"},{"size":1328,"mtime":1667877703999,"results":"14","hashOfConfig":"11"},{"size":360,"mtime":1665542902504,"results":"15","hashOfConfig":"11"},{"size":2751,"mtime":1667877715780,"results":"16","hashOfConfig":"11"},{"size":911,"mtime":1667877740477,"results":"17","hashOfConfig":"11"},{"size":2711,"mtime":1666148213335,"results":"18","hashOfConfig":"11"},{"size":1734,"mtime":1665544631357,"results":"19","hashOfConfig":"11"},{"filePath":"20","messages":"21","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"rn8ha8",{"filePath":"22","messages":"23","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"24","messages":"25","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"26","messages":"27","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"28","messages":"29","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"30","messages":"31","errorCount":0,"fatalErrorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"32"},{"filePath":"33","messages":"34","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"35"},{"filePath":"36","messages":"37","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"38"},{"filePath":"39","messages":"40","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"G:\\github\\videojs-http-source-selector-free\\scripts\\modules.rollup.config.js",[],"G:\\github\\videojs-http-source-selector-free\\scripts\\server.js",[],"G:\\github\\videojs-http-source-selector-free\\scripts\\test.rollup.config.js",[],"G:\\github\\videojs-http-source-selector-free\\scripts\\umd.rollup.config.js",[],"G:\\github\\videojs-http-source-selector-free\\scripts\\version.js",[],"G:\\github\\videojs-http-source-selector-free\\src\\components\\SourceMenuButton.js",["41","42","43","44","45","46"],"import videojs from 'video.js';\nimport SourceMenuItem from './SourceMenuItem';\n\nconst MenuButton = videojs.getComponent('MenuButton');\n\nclass SourceMenuButton extends MenuButton {\n  constructor(player, options) {\n    super(player, options);\n\n    MenuButton.apply(this, arguments);\n\n    const qualityLevels = this.player().qualityLevels();\n\n    // Handle options: We accept an options.default value of ( high || low )\n    // This determines a bias to set initial resolution selection.\n    if (options && options.default) {\n      if (options.default === 'low') {\n        for (let i = 0; i < qualityLevels.length; i++) {\n          qualityLevels[i].enabled = (i === 0);\n        }\n      } else if (options.default === 'high') {\n        for (let i = 0; i < qualityLevels.length; i++) {\n          qualityLevels[i].enabled = (i === (qualityLevels.length - 1));\n        }\n      }\n    }\n\n    // Bind update to qualityLevels changes\n    this.player().qualityLevels().on(['change', 'addqualitylevel'], videojs.bind(this, this.update));\n  }\n\n  createEl() {\n    return videojs.dom.createEl('div', {\n      className: 'vjs-http-source-selector vjs-menu-button vjs-menu-button-popup vjs-control vjs-button'\n    });\n  }\n\n  buildCSSClass() {\n    return MenuButton.prototype.buildCSSClass.call(this) + ' vjs-icon-cog';\n  }\n\n  update() {\n    return MenuButton.prototype.update.call(this);\n  }\n\n  createItems() {\n    const menuItems = [];\n    const levels = this.player().qualityLevels();\n    const labels = [];\n\n    for (let index = levels.length - 1; index >= 0; index--) {\n      const selected = (index === levels.selectedIndex);\n\n      // Display height if height metadata is provided with the stream, else use bitrate\n      let label = `${index}`;\n      let sortVal = index;\n\n      if (levels[index].height) {\n        label = `${levels[index].height}p`;\n        sortVal = parseInt(levels[index].height, 10);\n      } else if (levels[index].bitrate) {\n        label = `${Math.floor(levels[index].bitrate / 1e3)} kbps`;\n        sortVal = parseInt(levels[index].bitrate, 10);\n      }\n\n      // Skip duplicate labels\n      if (labels.indexOf(label) !== -1) {\n        continue;\n      }\n      labels.push(label);\n\n      menuItems.push(new SourceMenuItem(this.player_, { label, index, selected, sortVal }));\n    }\n\n    // If there are multiple quality levels, offer an 'auto' option\n    if (levels.length > 1) {\n      menuItems.push(new SourceMenuItem(this.player_, { label: 'Auto', index: levels.length, selected: false, sortVal: 99999 }));\n    }\n\n    // Sort menu items by their label name with Auto always first\n    menuItems.sort(function(a, b) {\n      return b.options_.sortVal - a.options_.sortVal;\n    });\n\n    return menuItems;\n  }\n}\n\nexport default SourceMenuButton;\n","G:\\github\\videojs-http-source-selector-free\\src\\components\\SourceMenuItem.js",["47","48","49","50"],"import videojs from 'video.js';\nconst MenuItem = videojs.getComponent('MenuItem');\nconst Component = videojs.getComponent('Component');\n\nclass SourceMenuItem extends MenuItem {\n  constructor(player, options) {\n    options.selectable = true;\n    options.multiSelectable = false;\n\n    super(player, options);\n  }\n\n  handleClick() {\n    const selected = this.options_;\n\n    super.handleClick();\n\n    const levels = this.player().qualityLevels();\n\n    for (let i = 0; i < levels.length; i++) {\n      // If this is the Auto option, enable all renditions for adaptive selection\n      levels[i].enabled = selected.index === levels.length || selected.index === i;\n    }\n  }\n\n  update() {\n    const selectedIndex = this.player().qualityLevels().selectedIndex;\n\n    this.selected(this.options_.index === selectedIndex);\n  }\n}\n\nComponent.registerComponent('SourceMenuItem', SourceMenuItem);\nexport default SourceMenuItem;\n","G:\\github\\videojs-http-source-selector-free\\src\\plugin.js",["51"],"import videojs from 'video.js';\nimport {version as VERSION} from '../package.json';\n\nimport SourceMenuButton from './components/SourceMenuButton';\nimport SourceMenuItem from './components/SourceMenuItem';\n\n// Default options for the plugin.\nconst defaults = {};\n\nconst registerPlugin = videojs.registerPlugin;\n// const dom = videojs.dom || videojs;\n\n/**\n* Function to invoke when the player is ready.\n*\n* This is a great place for your plugin to initialize itself. When this\n* function is called, the player will have its DOM and child components\n* in place.\n*\n* @function onPlayerReady\n* @param    {Player} player\n*           A Video.js player object.\n*\n* @param    {Object} [options={}]\n*           A plain object containing options for the plugin.\n*/\nconst onPlayerReady = (player, options) => {\n  player.addClass('vjs-http-source-selector');\n  // This plugin only supports level selection for HLS playback\n  if (player.techName_ !== 'Html5') {\n    return false;\n  }\n\n  /**\n  *\n  * We have to wait for the manifest to load before we can scan renditions for resolutions/bitrates to populate selections\n  *\n  **/\n  player.on(['loadedmetadata'], function(e) {\n    videojs.log('loadmetadata event');\n    // hack for plugin idempodency... prevents duplicate menubuttons from being inserted into the player if multiple player.httpSourceSelector() functions called.\n    if (!player.videojsHTTPSouceSelectorInitialized) {\n      player.videojsHTTPSouceSelectorInitialized = true;\n      const controlBar = player.controlBar;\n      const fullscreenToggle = controlBar.getChild('fullscreenToggle').el();\n\n      controlBar.el().insertBefore(controlBar.addChild('SourceMenuButton').el(), fullscreenToggle);\n    }\n  });\n};\n\n/**\n  * A video.js plugin.\n  *\n  * In the plugin function, the value of `this` is a video.js `Player`\n  * instance. You cannot rely on the player being in a \"ready\" state here,\n  * depending on how the plugin is invoked. This may or may not be important\n  * to you; if not, remove the wait for \"ready\"!\n  *\n  * @function httpSourceSelector\n  * @param    {Object} [options={}]\n  *           An object of options left to the plugin author to define.\n  */\nconst httpSourceSelector = function(options) {\n  this.ready(() => {\n    onPlayerReady(this, videojs.mergeOptions(defaults, options));\n    // this.getChild('controlBar').addChild('SourceMenuButton', {});\n  });\n\n  videojs.registerComponent('SourceMenuButton', SourceMenuButton);\n  videojs.registerComponent('SourceMenuItem', SourceMenuItem);\n};\n\n// Register the plugin with video.js.\nregisterPlugin('httpSourceSelector', httpSourceSelector);\n\n// Include the version number.\nhttpSourceSelector.VERSION = VERSION;\n\nexport default httpSourceSelector;\n","G:\\github\\videojs-http-source-selector-free\\test\\plugin.test.js",[],{"ruleId":"52","severity":1,"message":"53","line":6,"column":1,"nodeType":"54","messageId":"55","endLine":87,"endColumn":2},{"ruleId":"52","severity":1,"message":"53","line":7,"column":14,"nodeType":"56","messageId":"55","endLine":30,"endColumn":4},{"ruleId":"52","severity":1,"message":"53","line":32,"column":11,"nodeType":"56","messageId":"55","endLine":36,"endColumn":4},{"ruleId":"52","severity":1,"message":"53","line":38,"column":16,"nodeType":"56","messageId":"55","endLine":40,"endColumn":4},{"ruleId":"52","severity":1,"message":"53","line":42,"column":9,"nodeType":"56","messageId":"55","endLine":44,"endColumn":4},{"ruleId":"52","severity":1,"message":"53","line":46,"column":14,"nodeType":"56","messageId":"55","endLine":86,"endColumn":4},{"ruleId":"52","severity":1,"message":"53","line":5,"column":1,"nodeType":"54","messageId":"55","endLine":31,"endColumn":2},{"ruleId":"52","severity":1,"message":"53","line":6,"column":14,"nodeType":"56","messageId":"55","endLine":11,"endColumn":4},{"ruleId":"52","severity":1,"message":"53","line":13,"column":14,"nodeType":"56","messageId":"55","endLine":24,"endColumn":4},{"ruleId":"52","severity":1,"message":"53","line":26,"column":9,"nodeType":"56","messageId":"55","endLine":30,"endColumn":4},{"ruleId":"57","severity":1,"message":"58","line":13,"column":1,"nodeType":"59","messageId":"60","endLine":26,"endColumn":3},"require-jsdoc","Missing JSDoc comment.","ClassDeclaration","missingJSDocComment","FunctionExpression","valid-jsdoc","Missing JSDoc @return for function.","Block","missingReturn"]